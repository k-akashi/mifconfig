#!/bin/sh

Usage()
{
    echo "usage:\tmifconfig INTERFACE ADDRESS_FAMILY ADDRESS [ROUTER-ADDRESS]";
    echo "\tmifconfig INTERFACE [on,off or up,down]";
    echo "\tmifconfig INTERFACE inet dhcp";
    echo "\tmifconfig INTERFACE inet [on,off or up,down]";
    echo "\tmifconfig INTERFACE inet6 automatic";
    echo "\tmifconfig INTERFACE inet6 [on,off or up,down]";
    echo "\tmifconfig VLAN-INTERFACE create vlan VLAN-ID vlandev PHYSICAL-DEVICE";
    echo "\tmifconfig VLAN-INTERFACE destroy"; 
    exit 0;
}

InterfaceNameResolv()
{
    en=`/usr/sbin/networksetup -listnetworkserviceorder | grep $1`;
    en=`echo ${en} | awk '{
        for(i = 0; i < NF; i++) {
            if($i == "Port:") {
                ifname = $(i + 1);
                gsub(/,/, "", ifname);
                print ifname;
            }
        }
    }'`
    echo ${en};
}

InterfaceNameResolvTerminal()
{
    en=`/usr/sbin/networksetup -listnetworkserviceorder | grep $1`;
    en=`echo ${en} | awk '{
        for(i = 0; i < NF; i++) {
            if($i == "Device:") {
                ifname = $(i + 1);
                gsub(/\)/, "", ifname);
                print ifname;
            }
        }
    }'`
    echo ${en};
}

PrintInterfaces()
{
    if [ $# = 0 ]; then
        /usr/sbin/networksetup -listnetworkserviceorder;
    else
        ifname=$1;
        en=`InterfaceNameResolv ${ifname}`;
        interface=`InterfaceNameResolvTerminal ${ifname}`;

        if [ ${en} ]; then
            /usr/sbin/networksetup -listnetworkserviceorder | grep ${en} | grep Configuration > /dev/null;

            if [ $? = 0 ]; then
                vlan="true";
            fi

            if [ "${vlan}" = "true" ]; then
                en="${en} Configuration";
            fi

            echo `/usr/sbin/networksetup -getinfo "${en}"` | awk '{
                    for(i = 1; i <= NF; i++) {
                        if($i ~ /IP/ && $(i + 1) ~ /address/ && $(i - 1) !~ /IPv6/) {
                            inet = $(i + 2);
                            i+2;
                        }
                        else if($i ~ /Subnet/ && $(i + 1) ~ /mask/) {
                            netmask = $(i + 2);
                            i+2;
                        }
                        else if($i ~ /Router:/ && $(i + 1) !~ /IPv6/) {
                            router = $(i + 1);
                            i++;
                        }
                        else if($i ~/IPv6:/) {
                            if($(i + 1) ~ /Automatic/) {
                                v6conf = "autoconf";
                                i++;
                            }
                        }
                        else if($i ~ /IP/ && $(i + 1) ~ /address/ && $(i - 1) ~ /IPv6/) {
                            inet6 = $(i + 2);
                            i+2;
                        }
                        else if($i ~ /IPv6/ && $(i + 1) ~ /Router/) {
                            v6router = $(i + 2);
                            i+2;
                        }
                        else if($i ~ /Ethernet/ && $(i + 1) ~ /Address:/) {
                            ether = $(i + 2);
                            i+2;
                        }
                        else if($i ~ /'"${en}"'/ && $(i + 1) ~ /ID/) {
                            ether = $(i + 2);
                            i+2;
                        }
                    }
                }
                END {
                    print "'"${ifname}"': MacOSX Build-in Device Name, '"${en}"'";

                    if(ether) {
                        print "\tether", ether;
                    }
                    else {
                        system("/sbin/ifconfig '${interface}' | grep ether");
                    }

                    if(inet) {
                        print "\tinet", inet, "netmask", netmask;
                    }

                    if(inet6 != "none" && inet6) {
                        print "\tinet6", inet6, "prefixlen 64", v6conf; 
                    }
                    else if(v6conf = "autoconf") {
                            system("/sbin/ifconfig '"${interface}"' | grep inet6");
                    }

                    if(system("/sbin/ifconfig '"${interface}"' | /usr/bin/grep vlan: > /dev/null") == 0) {
                        while("/sbin/ifconfig '"${interface}"'" | getline) {
                            for(i = 0; i < NF; i++) {
                                if($i == "vlan:") {
                                    vlanid = $(i + 1);
                                }
                            }
                        }
                        close("/sbin/ifconfig '"${interface}"'");
                        while("/sbin/ifconfig '"${interface}"'" | getline) {
                            for(i = 1; i < NF; i++) {
                                if($i == "interface:") {
                                    vlandevx = $(i + 1);
                                    while("networksetup -listnetworkserviceorder | grep " vlandevx  | getline) {
                                        for(j = 0; j < NF; j++) {
                                            if($j == "Port:") {
                                                vlandev = $(j + 1);
                                                gsub(/,/, "", vlandev);
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        print "\tvlan:", vlanid, "parent interface:", vlandev "(" vlandevx ")";
                    }
                    system("/sbin/ifconfig '"${interface}"' | /usr/bin/egrep \"media|status\"");
                }'
            exit 0;
        else
            echo "mifconfig: interface ${ifname} does not exist";
            exit 1;
        fi
    fi
}

PrintAllInterfaces()
{
    ifinfo=`/usr/sbin/networksetup -listnetworkserviceorder`
    echo ${ifinfo} | 
        awk '{
                for(i = 1; i <= NF; i++) {
                    if($i ~ /Hardware/ && $(i + 1) ~ /Port/) {
                        while(1) {
                            if($i ~ /Device:/) {
                                i++;
                                gsub(/\)/, "", $i);
                                if($i != "") {
                                    ifconfig_cmd = "ifconfig " $i " >/dev/null 2>&1";
                                    mifconfig_cmd = "mifconfig " $i;
                                    ret = system(ifconfig_cmd);
                                    if(ret == 0) {
                                        system(mifconfig_cmd);
                                    }
                                }
                                break;
                            }
                            i++;
                        }
                    }
                }
            }'
    exit 0;
}

v4AddressCheck()
{
    /usr/bin/perl -e "
        my @addrs = split(/\//, \$ARGV[0]);
        if(@addrs > 2) {
            exit 1;
        }
        my @octets = split(/\./, \$addrs[0]);
        foreach my \$octet(@octets) {
            if(\$octet < 0 || \$octet > 256) {
                exit 1;
            }
        }
    " ${check_addr}

    if [ $? -eq 1 ]; then
        echo "Invalid IP Address";
        exit 1;
    fi
}

Configure_v4Address()
{
    en=`InterfaceNameResolv ${ifname}`;
    if [ $2 = "inet" ]; then
        shift
    fi

    /usr/sbin/networksetup -listnetworkserviceorder | grep ${en} | grep Configuration > /dev/null;

    if [ $? = 0 ]; then
        vlan="true";
    fi

    if [ $2 = "dhcp" ]; then
        if [ "${vlan}" = "true" ]; then
            /usr/sbin/networksetup -setdhcp "${en} Configuration"
        else
            /usr/sbin/networksetup -setdhcp ${en}
        fi
        exit 0;
    fi

    if [ "$2" = "on" -o "$2" = "up" ]; then
        if [ "${vlan}" = "true" ]; then
            /usr/sbin/networksetup -setdhcp "${en} Configuration"
        else
            /usr/sbin/networksetup -setdhcp ${en}
        fi
        exit 0;
    fi

    if [ "$2" = "off" -o "$2" = "down" ]; then
        if [ "${vlan}" = "true" ]; then
            /usr/sbin/networksetup -setv4off "${en} Configuration"
        else
            /usr/sbin/networksetup -setv4off ${en}
        fi
        exit 0;
    fi

    addr=$2;
    mask=`echo ${addr} |
        awk -F"/" '{
            if($2 <= 0 || $2 > 32) {
                print "Invalid";
                exit 1;
            }
            prefix = int($2 / 8);
            mask = 8 - ($2 % 8);
            for(i = 1; i <= prefix; i++) {
                subnet[i] = "255";
            }
            prefix++;
            subnet[prefix] = 256 - (2^mask);
            prefix++;
            if(prefix <= 4) {
                for(i = prefix; i <= 4; i++) {
                    subnet[i] = "0";
                }
            }
            subnetmask = subnet[1] "." subnet[2] "." subnet[3] "." subnet[4];
            print subnetmask;
        }'`

    if [ "${mask}" == "Invalid" ]; then
        echo "mifconfig: Invalid Prefix";
        exit 1;
    fi

    addr=`echo ${addr} | 
        awk -F"/" '{
            print $1;
        }'`

    check_addr=$addr;
    v4AddressCheck;

    if [ "${mask}" != "0.0.0.0" ]; then
        cidr_flag=1;
        continue;
    elif [ "$3" = "netmask" -o "$3" = "mask" ]; then
        shift;
        mask=$3;
        cidr_flag=0;
    else
        mask=$3;
        cidr_flag=0;
    fi

    check_addr=$mask;
    v4AddressCheck;

    if [ $# -eq 3 -a ${cidr_flag} -eq 1 ]; then
        router=$3;
    elif [ $# -eq 4 ]; then
        router=$4;
    else
        router="None";
    fi

    if [ ${router} == "None" ]; then
        router="";
    else
        router=`echo ${router} | 
            awk -F"." '{
                if(NF > 4) {
                    print "Invalid Router Address";
                    exit 1;
                }
                for(i = 1; i <= 4; i++) {
                    if(255 <= int($i)) {
                        print "Invalid Router Address";
                        exit 1;
                    } 
                } 
                print $0;
            }'`
    fi

    if [ "${vlan}" = "true" ]; then
        /usr/sbin/networksetup -setmanual "${en} Configuration" ${addr} ${mask} ${router};
    else
        /usr/sbin/networksetup -setmanual ${en} ${addr} ${mask} ${router};
    fi

    exit 0;
}

FullLength_v6Address()
{
    addr=`/usr/bin/perl -e "
        \\$v6addr = lc(@ARGV[0]);
        if(length(\\$v6addr) < 2 || length(\\$v6addr) > 39 || 
            \\$v6addr =~ /(\:\:\:)/ || \\$v6addr !~ /^[0-9a-f:]+$/) {
            exit 1;
        }
        my \\$oct_count = (() = \\$v6addr =~ /\:/g);
        if(\\$oct_count < 2 || \\$count > 7) {
            exit 1;
        }
        \\$v6addr =~ s/^::/0::/;
        \\$v6addr =~ s/::$/::0/;
        \\$v6addr =~ s/::/':0' x (8 - \\$oct_count) . ':'/e;
        \\$v6addr =~ s/[0-9a-f]+/sprintf('%04s', $&)/egi;

        if(\\$v6addr !~ /^([0-9a-f]{4}:){7}[0-9a-f]{4}$/i) {
            exit 1;
        }
        print \\"\\$v6addr\\";
        " ${check_v6addr}`;

    if [ $? -eq 1 ]; then
        echo "mifconfig: Invalid IPv6 Address";
        exit 1
    fi
}

Configure_v6Address()
{
    en=`InterfaceNameResolv ${ifname}`;
    shift;
    /usr/sbin/networksetup -listnetworkserviceorder | grep ${en} | grep Configuration > /dev/null;

    if [ $? = 0 ]; then
        vlan="true";
    fi

    if [ "$2" = "automatic" -o "$2" = "autoconf" ]; then
        if [ "${vlan}" = "true" ]; then
            /usr/sbin/networksetup -setv6automatic "${en} Configuration"
        else
            /usr/sbin/networksetup -setv6automatic ${en}
        fi
        exit 0;
    fi

    if [ "$2" = "on" -o "$2" = "up" ]; then
        if [ "${vlan}" = "true" ]; then
            /usr/sbin/networksetup -setv6automatic "${en} Configuration"
        else
            /usr/sbin/networksetup -setv6automatic ${en}
        fi
        exit 0;
    fi

    if [ "$2" = "off" -o "$2" = "down" ]; then
        if [ "${vlan}" = "true" ]; then
            /usr/sbin/networksetup -setv6off "${en} Configuration"
        else
            /usr/sbin/networksetup -setv6off ${en}
        fi
        exit 0;
    fi

    addr=$2;
    addr=`echo ${addr} | awk '{
        split($0, addr, "/");
        if(length(addr) == 1) {
            print $0;
            exit 0;
        }
        else if(length(addr) == 2) {
            if(addr[2] == 64) {
                print addr[1];
                exit 0;
            }
            else {
                exit 1;
            }
        }
        else {
            exit 1;
        }
    }'`
    if [ $? = 1 ];
    then
        echo "mifconfig: Invalid Prefix";
        exit 1;
    fi
    check_v6addr=${addr};
    FullLength_v6Address;

    echo "mifconfig: not implemented.";
    echo "Apple さん よろしくおねがいしまぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁぁす!!!!!!!!!";
    exit 0;
}

DownInterface()
{
    en=`InterfaceNameResolv ${ifname}`;

    /usr/sbin/networksetup -listnetworkserviceorder | grep ${en} | grep Configuration > /dev/null;

    if [ $? = 0 ]; then
        vlan="true";
    fi

    if [ "${vlan}" = "true" ]; then
        /usr/sbin/networksetup -setv4off "${en} Configuration"
        /usr/sbin/networksetup -setv6off "${en} Configuration"
    else
        /usr/sbin/networksetup -setv4off ${en}
        /usr/sbin/networksetup -setv6off ${en}
    fi

    exit 0;
}

UpInterface()
{
    en=`InterfaceNameResolv ${ifname}`;

    /usr/sbin/networksetup -listnetworkserviceorder | grep ${en} | grep Configuration > /dev/null;

    if [ $? = 0 ]; then
        vlan="true";
    fi

    if [ "${vlan}" = "true" ]; then
        /usr/sbin/networksetup -setdhcp "${en} Configuration"
        /usr/sbin/networksetup -setv6automatic "${en} Configuration"
    else
        /usr/sbin/networksetup -setdhcp ${en}
        /usr/sbin/networksetup -setv6automatic ${en}
    fi

    exit 0;
}

CreateVLANif()
{
    en=`InterfaceNameResolv ${ifname}`;
    if [ ${en} ]; then
        echo "mifconfig: ${ifname} exist";
        exit 1;
    fi

    if [ $3 = "vlan" ]; then
        if [ $# = 3 ]; then
            echo "Please input VLAN ID";
            exit 1;
        elif [ $4 -gt 1 -a $4 -lt 4096 ]; then
            vlanid=$4;
        else
            echo "Invalid VLAN ID";
            exit 1;
        fi
    else
        "Invalid Argument";
    fi

    if [ "$5" = "vlandev" -o "$5" = "vlanif" ]; then
        if [ $# = 5 ]; then
            echo "Please input VLAN device";
            exit 1;
        fi
        vlandev=$6;
        /usr/sbin/networksetup -createVLAN "${ifname}" ${vlandev} ${vlanid} 
        exit 0;
    else
        echo "Please vlandev or vlanif";
        exit 1;
    fi
}

ResolvVLANifName()
{
    en=`/usr/sbin/networksetup -listnetworkserviceorder | grep $1`;    
    en=`echo ${en} | awk '{
        for(i = 0; i <= NF; i++) {
            if($i == "Device:") {
                vlanif = $(i + 1);
                gsub(/\)/, "", vlanif)
                print vlanif;
            }
        }
    }'`
    echo ${en};
}

DestroyVLANif()
{
    en=`ResolvVLANifName ${ifname}`;

    if ! [ ${en} ]; then
        echo "mifconfig: ${ifname} does not exist";
    exit 1;
    fi

    vlanid=`/sbin/ifconfig ${en} | awk '{
        for(i = 0; i < NF; i++) {
            if($i == "vlan:") {
                print $(i + 1);
            }
        }
    }'`

    vlandev=`/sbin/ifconfig ${en} | awk '{
        for(i = 0; i < NF; i++) {
            if($i == "interface:") {
                print $(i + 1);
            }
        }
    }'`
 
    /usr/sbin/networksetup -deleteVLAN ${en} ${vlandev} ${vlanid}

    exit 0;
}

if [ $# = 0 ]; then
    PrintInterfaces
    exit 0;
fi

if [ $# = 1 ]; then
    if [ $1 = "-h" -o $1 = "--help" ]; then
        Usage
    elif [ "$1" = "-a" ]; then
        PrintAllInterfaces
    else
        PrintInterfaces $@
    fi
fi

ifname=$1;

if [ "$2" = "create" -o "$2" = "plumb" ]; then
    CreateVLANif $@
fi

if [ "$2" = "destroy" -o "$2" = "unplumb" ]; then
    DestroyVLANif $@
fi

if [ "$2" = "on" -o "$2" = "up" ]; then
    UpInterface $@
fi

if [ "$2" = "off" -o "$2" = "down" ]; then
    DownInterface $@
fi

if [ "$2" = "inet" ]; then
    Configure_v4Address $@
elif [ "$2" = "inet6" ]; then
    Configure_v6Address $@
else
    Configure_v4Address $@
fi

exit 0
